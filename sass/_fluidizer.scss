//Copyright 2011, Marc Busqué Pérez
//
//This file is a part of Fluidizer.
//
//Fluidizer is free software: you can redistribute it and/or modify
//it under the terms of the GNU Lesser General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Lesser General Public License for more details.
//
//You should have received a copy of the GNU Lesser General Public License
//along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//////////////////////////////////////////////////////////////////////////////
//Contact: Marc Busqué Pérez - marc@lamarciana.com - http://www.lamarciana.com
//////////////////////////////////////////////////////////////////////////////
//
//DEFINITIONS USED THROUGHOUT THE DOCUMENTATION
//
//x units: An integer in pixels to tell an horizontal size in pixels, or two unitless floating-point numbers to tell an horizontal size in "grid units" (see below). Examples are "480px" or "3 2".
//
//Grid units: Two unitless floating-point numbers. First one tells how many columns width's (without its gutters) the horizontal size takes up. Second one tells how many gutter width's the horizontal size takes up. For example, "3 2".
//
//Property x units: x units, a string to manually force something or false to don't set anything. Examples are "480px", "3 2", "auto" or "false".
//
//y units: An integer in pixels to tell a vertical size in pixels, or an unitless floating-point number to tell a vertical size in baseline units (see below).
//
//Baseline units: A unitless floating-point number. It tells how many baseline heights the vertical size takes up.
//
//Property y units: y units, a string to manually force something or false to don't set it.
//
//VARIABLES
//
//@global bool Set to true if you are using a grid design strategy, false otherwise.
$grid-strategy: true !default;

//@global px Column width in pixels for the grid. Ignored if $grid-strategy is set to false.
$column-width: 60px !default;

//@global px Gutter width in pixels for the grid. Ignored if $grid-strategy is set to false.
$gutter-width: 20px !default;

//@global int Number of columns of the grid. Ignored if $grid-strategy is set to false.
$columns: 12 !default;

//@global px Non-grid layout width in pixels. Ignored if $grid-strategy is set to true
$design-max-width: 960px !default;

//@global px Baseline height in pixels.
$baseline: 18px !default;

//@global px Initial relevant font size (usually browser default).
$initial-rfs: 16px !default;

//MIXINS
//
//Set the max-width property for an element to the grid width or the design maximum width. This mixin is most of the times applied to an element that is the container of anything else (sometimes this is 'body'), and it is used when you want to have a maximum resolution limit. When the screen resolution is equal or higher than this value, all the x dimensions set with fluidizer will have percentage dimensions but visually they exactly will take up the amount of pixels that you indicated. For lower resolutions, all the x dimensions set with fluidizer will scale.
//
//@param bool $em Whether to set max-width in em units or not. Defaults to true.
//@param px $rfs Relative font size used to calculate max-width in em. Only used if $em parameter is set to true.
@mixin set-layout-max-width($em: true, $rfs: $initial-rfs) {
   $max-width: get-layout-max-width();
   @if ($em) {
      $max-width: ($max-width / $rfs) * 1em;
   }
   max-width: $max-width;
}

//Display rules for horizontal fluid sizes
//
///@param px|list|string|bool $width Width value in property x units.
///@param px|list|string|bool $padding Padding left and right values in property x units. One (the same for left and right) or a list of two (first for the left, second for the right).
///@param px|list|string|bool $border Border left and right values in property x units. One (the same for left and right) or a list of two two (first for the left, second for the right).
///@param px|list|string|bool $margin Margin left and right values in property x units. One (the same for left and right) or a list of two two (first for the left, second for the right).
//@param px|list $cbw Containing block width in x units.
@mixin fluid-x($width:false, $padding: false, $border: false, $margin: false, $cbw: get-layout-max-width()) {
   @include display-x-property(width, $width, $cbw);
   $left-right-padding: extract-left-right-values($padding);
   @include display-x-property('padding-left', nth($left-right-padding, 1), $cbw);
   @include display-x-property('padding-right', nth($left-right-padding, 2), $cbw);
   $left-right-border: extract-left-right-values($border);
   @include display-x-property('border-left-width', nth($left-right-border, 1), $cbw);
   @include display-x-property('border-right-width', nth($left-right-border, 2), $cbw);
   $left-right-margin: extract-left-right-values($margin);
   @include display-x-property('margin-left', nth($left-right-margin, 1), $cbw);
   @include display-x-property('margin-right', nth($left-right-margin, 2), $cbw);
}

//Display the rules to create a fluid column
//
///@param px|list|string|bool $width Width value in property x units.
///@param px|list|string|bool $padding Padding left and right values in property x units. One (the same for left and right) or a list of two (first for the left, second for the right).
///@param px|list|string|bool $border Border left and right values in property x units. One (the same for left and right) or a list of two (first for the left, second for the right).
///@param px|list|string|bool $margin Margin left and right values in property x units. One (the same for left and right) or a list of two (first for the left, second for the right).
//@param px|list $cbw Containing block width in x units.
@mixin fluid-column($width, $padding: false, $border: false, $margin: false, $cbw: get-layout-max-width()) {
   @include columnize();
   @include fluid-x($width, $padding, $border, $margin, $cbw);
}

//Display rules for vertical fluid sizes.
//
///@param px|int|string|bool $line-height Line-height value in property y units.
///@param px|int|string|bool $height Height value in property y units.
///@param px|int|string|bool $padding Padding top and bottom values in y units. One (the same for top and bottom) or a list of two (first for top, and second for bottom).
///@param px|int|string|bool $border Border top and bottom values in y units. One (the same for top and bottom) or a list of two (first for top, and second for bottom).
///@param px|int|string|bool $margin Margin top and bottom values in y units. One (the same for top and bottom) or a list of two (first for top, and second for bottom).
//@param px|int $rfs Relevant font size in y units.
@mixin fluid-y($line-height: false, $height: false, $padding: false, $border: false, $margin: false, $rfs: $initial-rfs) {
   @include display-y-property(line-height, $line-height, $rfs);
   @include display-y-property(height, $height, $rfs);
   $top-bottom-padding: extract-top-bottom-values($padding);
   @include display-y-property('padding-top', nth($top-bottom-padding, 1), $rfs);
   @include display-y-property('padding-bottom', nth($top-bottom-padding, 2), $rfs);
   $top-bottom-border: extract-top-bottom-values($border);
   @include display-y-property('border-top-width', nth($top-bottom-border, 1), $rfs);
   @include display-y-property('border-bottom-width', nth($top-bottom-border, 2), $rfs);
   $top-bottom-margin: extract-top-bottom-values($margin);
   @include display-y-property('margin-top', nth($top-bottom-margin, 1), $rfs);
   @include display-y-property('margin-bottom', nth($top-bottom-margin, 2), $rfs);
}

//For given property and value, display its rule with the value in percentage units if it's numeric.
//
//@param string $property Property the rule will be applied on.
//@param px|list|string $value A value in property x units.
//@param px $cbw Containing block width in x units.
@mixin display-x-property($property, $value, $cbw) {
   @if ($value) {
      @if (is-px-unit($value) or is-grid-unit($value)) {
         #{$property}: percent($value, $cbw);
      } @else {
         #{$property}: unquote($value);
      }
   }
}

//For given property and value, display its rule with the value in em units if it's numeric.
//
//@param string $property Property the rule will be applied on.
//@param px|list|string $value A value in property y units.
//@param px $rfs Relevant font size in y units.
@mixin display-y-property($property, $value, $rfs) {
   @if ($value) {
      @if (is-px-unit($value) or is-baseline-unit($value)) {
         #{$property}: em($value, $rfs);
      } @else {
         #{$property}: unquote($value);
      }
   }
}

//Display minimal styles to show a box like a column
@mixin columnize() {
   float: left;
}

//FUNCTIONS
//
//Converts x units to percentage.
//
//@param px|list $value A value in x units.
//@param px|list $cbw Containing block width in x units.
//
//@return % The value converted to percentage.
@function percent($value, $cbw) {
   $value-px: x-to-px($value);
   @return px-to-percent($value-px, $cbw);
}

//Converts y units to em.
//
//@param px|int $value A value in y units.
//@param int|px $rfs Relevant font size in y units.
//
//@return em The value converted to em's.
@function em($value, $rfs: $initial-rfs) {
   $value-px: y-to-px($value);
   @return px-to-em($value-px, $rfs);
}

//Converts pixels to percentage.
//
//@param px $value A value in pixels.
//@param px $cbw Containing block width in x units.
//
//@return % The value converted to percentage.
@function px-to-percent($value, $cbw) {
   $cbw-px: x-to-px($cbw);
   @return ($value / $cbw-px) * 100%;
}

//Converts x units to pixels.
//
//@param px|list A value in x units.
//
//@return % The value converted to pixels.
@function x-to-px($value) {
   @if (is-grid-unit($value)) {
      @return grid-to-px($value);
   } @else if (is-px-unit($value)) {
      @return $value;
   }
}

//Converts grid units to percentage.
//
//@param list $value A value in grid units.
//
//@return px The alue converted to pixels.
@function grid-to-px($value) {
   @return ((nth($value, 1) * $column-width) + (nth($value, 2) * $gutter-width));
}

//Converts pixels to em.
//
//@param px $value A value in pixels.
//@param px $rfs Relevant font size in y units.
//
//@return em The value converted to em's.
@function px-to-em($value, $rfs) {
   $rfs-px: y-to-px($rfs);
   @return ($value / $rfs-px) * 1em;
}

//Converts y units to pixels.
//
//@param px $value A value in y units.
//
//@return em The value converted to pixels.
@function y-to-px($value) {
   @if (is-baseline-unit($value)) {
      @return baseline-to-px($value);
   } @else if (is-px-unit($value)) {
      @return $value;
   }
}

//Converts baseline units to pixels.
//
//@param int $value A value in baseline units.
//
//@return px The value converted to pixels.
@function baseline-to-px($value) {
   @return $value * $baseline;
}

//Returns the grid width in pixels.
//
//@return px The grid width in pixels.
@function grid-width() {
   @return ($column-width + $gutter-width) * $columns;
}

//Returns the layout maximum width, discerning between a grid design and a non-grid one.
//
//@return px Layout maximum width in pixels.
@function get-layout-max-width() {
   @if ($grid-strategy) {
      @return grid-width();
   } @else {
      @return $design-max-width;
   }
}

//Check whether a value is expressed in grid units or not.
//
//@param mixed $value The value to check.
//
//@return bool Whether the value is expressed in grid units or not.
@function is-grid-unit($value) {
   @if (type_of($value) == list) {
      @if (length($value) == 2) {
         @if (type_of(nth($value, 1)) == number and type_of(nth($value, 2)) == number) {
            @if (unitless(nth($value, 1)) and unitless(nth($value, 2))) {
               @return true;
            }
         }
      }
   }
   @return false;
}

//Check whether a value is expressed in pixels units or not. It is not checked if the value is an integer to allow CSS hacks that use fractions of pixels.
//
//@param mixed $value The value to check.
//
//@return bool Whether the value is expressed in pixel units or not.
@function is-px-unit($value) {
   @if (type_of($value) == number) {
      @if (unit($value) == px) {
         @return true;
      }
   }
   @return false;
}

//Check whether a value is a list of two zeros or not.
//
//@param mixed $value The value to check.
//
//@return bool Whether the value is a list of two zeros or not.
@function is-double-zero($value) {
   @if (type_of($value) == list) {
      @if (length($value) == 2) {
         @if (nth($value, 1) == 0 and nth($value, 2) == 0) {
            @return true;
         }
      }
   }
   @return false;
}

//Check whether a value is expressed in baseline units or not.
//
//@param mixed $value The value to check.
//
//@return bool Whether the value is expressed in baseline units or not.
@function is-baseline-unit($value) {
   @if (type_of($value) == number) {
      @if (unitless($value)) {
         @return true;
      }
      @return false;
   }
}

//For a given value representing both left and right size, return a list of two elements, being first one left value and second one right value.
//
//@param px|list|string $value One (the same for left and right) or two (first is left, second is right) property x units.
//
//@return list Left and right values discerned.
@function extract-left-right-values($value) {
   $value-left: false;
   $value-right: false;
   @if (type_of($value) != list or is-grid-unit($value) and is-double-zero($value) == false) {
      $value-left: $value;
      $value-right: $value;
   } @else {
      $value-left: nth($value, 1);
      $value-right: nth($value, 2);
   }
   @return ($value-left, $value-right);
}

//For a given value representing both top and bottom size, return a list of two elements, being first one top value and second one bottom value
//
//@param px|list|string $value One (the same for top and bottom) or two (first is top, second is bottom) property y units.
//
//@return list Top and bottom values discerned.
@function extract-top-bottom-values($value) {
   $value-top: false;
   $value-bottom: false;
   @if (type_of($value) != list) {
      $value-top: $value;
      $value-bottom: $value;
   } @else {
      $value-top: nth($value, 1);
      $value-bottom: nth($value, 2);
   }
   @return ($value-top, $value-bottom);
}
