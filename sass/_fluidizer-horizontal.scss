//Copyright 2011, Marc Busqué Pérez
//
//This file is a part of Fluidizer.
//
//Fluidizer is free software: you can redistribute it and/or modify
//it under the terms of the GNU Lesser General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Lesser General Public License for more details.
//
//You should have received a copy of the GNU Lesser General Public License
//along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//////////////////////////////////////////////////////////////////////////////
//Contact: Marc Busqué Pérez - marc@lamarciana.com - http://www.lamarciana.com
//////////////////////////////////////////////////////////////////////////////
//
//DEFINITIONS USED THROUGHOUT THE DOCUMENTATION
//
//Horizontal size units: An integer in pixels to tell an horizontal size in pixels, or a two unitless integers to tell a horizontal size in "grid units" (see below). Examples are "480px" or "3 2".
//
//Grid units: Two unitless integers. First one tells how many columns width's (without its gutters) the horizontal size takes up. Second one tells how many gutter width's the horizontal size takes up. For example, "3 2".
//
//Property horizontal size units: Horizontal size units, a string to manually force something or false to don't set anything. Examples are "480px", "3 2", "auto" or "false".
//
//
//VARIABLES
//
//@global bool Set to true if you are using a grid design strategy, false otherwise.
$grid-strategy: true !default;

//@global px Column width in pixels for the grid. Ignored if $grid-strategy is set to false.
$column-width: 60px !default;

//@global px Gutter width in pixels for the grid. Ignored if $grid-strategy is set to false.
$gutter-width: 20px !default;

//@global int Number of columns of the grid. Ignored if $grid-strategy is set to false.
$columns: 12 !default;

//@global px Non-grid layout width in pixels. Ignored if $grid-strategy is set to true
$design-max-width: 960px !default;

//MIXINS
//
//Set the max-width property for an element to the grid width or the layout maximum width. This mixin is most of the times applied to an element that is the container of anything else (sometimes this is 'body'), and it is used when you want to have a maximum resolution limit. When the screen resolution is equal or higher than this value, all the dimensions set with fluidizer will have fluid dimensions but visually they exactly will take up the amount of pixels that you indicated. For lower resolutions, all the dimensions set with fluidizer will scale.
//
//@param bool $em Whether to set max-width in em units or not. Defaults to true.
//@param px $rfs Relative font size used to calculate max-width in em. Only used if $em parameter is set to true.
@mixin set-layout-max-width($em: true, $rfs: 16px) {
   $max-width: get-layout-max-width();
   @if ($em) {
      $max-width: ($max-width / $rfs) * 1em;
   }
   max-width: $max-width;
}

//Display rules for horizontal fluid sizes
//
///@param px|list|string|bool $width Width value in property horizontal size units.
///@param px|list|string|bool $padding Padding left and right values in property horizontal size units. One (the same for left and right) or a list of two (first for the left, second for the right).
///@param px|list|string|bool $border Border left and right values in property horizontal size units. One (the same for left and right) or a list of two two (first for the left, second for the right).
///@param px|list|string|bool $margin Margin left and right values in property horizontal size units. One (the same for left and right) or a list of two two (first for the left, second for the right).
//@param px|list $cbw Containg block width in horizonal size units.
@mixin fluid-horizontal($width:false, $padding: false, $border: false, $margin: false, $cbw: get-layout-max-width()) {
   @include display-property(width, $width, $cbw);
   $left-right-padding: extract-left-right-values($padding);
   @include display-property('padding-left', nth($left-right-padding, 1), $cbw);
   @include display-property('padding-right', nth($left-right-padding, 2), $cbw);
   $left-right-border: extract-left-right-values($border);
   @include display-property('border-left-width', nth($left-right-border, 1), $cbw);
   @include display-property('border-right-width', nth($left-right-border, 2), $cbw);
   $left-right-margin: extract-left-right-values($margin);
   @include display-property('margin-left', nth($left-right-margin, 1), $cbw);
   @include display-property('margin-right', nth($left-right-margin, 2), $cbw);
}

//Display the rules to create a fluid column
//
///@param px|list|string|bool $width Width value in property horizontal size units.
///@param px|list|string|bool $padding Padding left and right values in property horizontal size units. One (the same for left and right) or a list of two (first for the left, second for the right).
///@param px|list|string|bool $border Border left and right values in property horizontal size units. One (the same for left and right) or a list of two (first for the left, second for the right).
///@param px|list|string|bool $margin Margin left and right values in property horizontal size units. One (the same for left and right) or a list of two (first for the left, second for the right).
//@param px|list $cbw Containg block width in horizonal size units.
@mixin fluid-column($width, $padding: false, $border: false, $margin: false, $cbw: get-layout-max-width()) {
   @include columnize();
   @include fluid-horizontal($width, $padding, $border, $margin, $cbw);
}

//For given property and value, display its rule with the value in percentage units if it's numeric.
//
//@param string $property Property the rule will be applied on.
//@param px|list|string $value A value in property horizontal size units.
//@param px $cbw Containing block width in pixels
@mixin display-property($property, $value, $cbw) {
   @if ($value) {
      @if (is-px-unit($value) or is-grid-unit($value)) {
         #{$property}: percent($value, $cbw);
      } @else {
         #{$property}: unquote($value);
      }
   }
}

//Display minimal styles to show a box like a column
@mixin columnize() {
   float: left;
}

//FUNCTIONS
//
//Converts horizontal size units to percentage.
//
//@param px|list $value A value in horizonal size units.
//@param px|list $cbw Containg block width in horizonal size units.
//
//@return % The value converted to percentage.
@function percent($h-size, $cbw) {
   $h-size-px: horizontal-to-px($h-size);
   @return px-to-percent($h-size-px, $cbw);
}

//Returns the grid width in pixels.
//
//@return px The grid width in pixels.
@function grid-width() {
   @return ($column-width + $gutter-width) * $columns;
}

//Returns the layout maximum width, discerning between a grid design and a non-grid one.
//
//@return px Layout maximum width in pixels.
@function get-layout-max-width() {
   @if ($grid-strategy) {
      @return grid-width();
   } @else {
      @return $design-max-width;
   }
}

//For a given value representing both left and right size, return a list of two elements, being first one left value and second one right value.
//
//@param px|list|string $value One (the same for left and right) or two (first is left, second is right) property horizontal size units.
//
//@return list Left and right values discerned.
@function extract-left-right-values($value) {
   $value-left: false;
   $value-right: false;
   @if (type_of($value) != list or is-grid-unit($value) and is-double-zero($value) == false) {
      $value-left: $value;
      $value-right: $value;
   } @else {
      $value-left: nth($value, 1);
      $value-right: nth($value, 2);
   }
   @return ($value-left, $value-right);
}

//Converts a pixels value to percentage units.
//
//@param px $value A value in pixels.
//@param px $cbw Containing block width in horizontal size units.
//
//@return % Value converted to percentage.
@function px-to-percent($value, $cbw) {
   $cbw-px: horizontal-to-px($cbw);
   @return ($value / $cbw-px) * 100%;
}

//Converts a horizontal size unit value to pixels.
//
//@param px|list A value in horizontal size units.
//
//@return % Value converted to pixels.
@function horizontal-to-px($value) {
   @if (is-grid-unit($value)) {
      @return grid-to-px($value);
   } @else if (is-px-unit($value)) {
      @return $value;
   }
}

//Converts a value in grid units to percentage.
//
//@param list $value A value in grid units.
//
//@return px Value converted to pixels.
@function grid-to-px($value) {
   @return ((nth($value, 1) * $column-width) + (nth($value, 2) * $gutter-width));
}

//Check whether a value is expressed in grid units or not.
//
//@param mixed $value The value to check.
//
//@return bool Whether the value is expressed in grid units or not
@function is-grid-unit($value) {
   @if (type_of($value) == list) {
      @if (length($value) == 2) {
         @if (type_of(nth($value, 1)) == number and type_of(nth($value, 2)) == number) {
            @if (unitless(nth($value, 1)) and unitless(nth($value, 2))) {
               @return true;
            }
         }
      }
   }
   @return false;
}

//Check whether a value is expressed in pixels units or not.
//
//@param mixed $value The value to check.
//
//@return bool Whether the value is expressed in pixel units or not.
@function is-px-unit($value) {
   @if (type_of($value) == number) {
      @if (unit($value) == px) {
         @return true;
      }
   }
   @return false;
}

//Check whether a value is a list of two zeros or not.
//
//@param mixed $value The value to check.
//
//@return bool Whether the value is a list of two zeros or not.
@function is-double-zero($value) {
   @if (type_of($value) == list) {
      @if (length($value) == 2) {
         @if (nth($value, 1) == 0 and nth($value, 2) == 0) {
            @return true;
         }
      }
   }
   @return false;
}
