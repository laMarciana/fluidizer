//Copyright 2011, Marc Busqué Pérez
//
//This file is a part of Fluidizer.
//
//Fluidizer is free software: you can redistribute it and/or modify
//it under the terms of the GNU Lesser General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Lesser General Public License for more details.
//
//You should have received a copy of the GNU Lesser General Public License
//along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//////////////////////////////////////////////////////////////////////////////
//Contact: Marc Busqué Pérez - marc@lamarciana.com - http://www.lamarciana.com
//////////////////////////////////////////////////////////////////////////////
//In documentation, "horizontal size units" value mean: an integer in pixels to indicate an horizontal size in pixels, or a two unitless integers to indicate a horizontal size in "grid units". In grid units, first number indicates how many columns width and second numer indicates how many gutters width the horizontal size spreads
//
//In documentation, "containing block width reference" is a value indicating the containing block for given selected elements. It can be in horizontal size units (for manual assigment) or a unitless integer. If last one, 0 means parent element is root element (which width is grid or page width), 1 means parent element is a descendant of root element you have already setted and so on. -1 means new element is descendant of last element setted.
//
//VARIABLES
//@global bool set to true if you are using a grid design strategy, false otherwise.
$grid-strategy: true !default;

//@global px column width in pixels for the grid. Ignored if $grid-strategy is set to false
$column-width: 60px !default;

//@global px gutter width in pixels for the grid. Ignored if $grid-strategy is set to false
$gutter-width: 20px !default;

//@global int number of column for the grid. Ignored if $grid-strategy is set to false
$columns: 12 !default;

//@global px layout width in pixels. Ignored if $grid-strategy is set to true
$layout-max-width: 960px !default;

//MIXINS
//Set max-width of an element to grid-width or layout-max-width. This mixin is most of times applied to the element which will be the container for everything else, usually 'body', and it's used when you want to have a maximum resolution limit
//
//@param bool $em whether to set max-width in em's or not
//@parem px $rfs relative font size to calculate em width. Only used if $em is set to true
@mixin set-layout-max-width($em: true, $rfs: 16px) {
   @if ($grid-strategy) {
      $max-width: grid-width();
   } @else {
      $max-width: $layout-max-width;
   }
   @if ($em) {
      $max-width: ($max-width / $rfs) * 1em;
   }
   max-width: $max-width;
}

//Display the rules to create fluid horizontal sizes for a box
//
///@param px|list|string|bool $width width value. Horizontal size units, a string to manually force something or false to don't set
///@param px|list|string|bool $padding padding value. Horizontal size units, a string to manually force something or false to don't set
///@param px|list|string|bool $border border value. Horizontal size units, a string to manually force something or false to don't set
///@param px|list|string|bool $margin margin value. Horizontal size units, a string to manually force something or false to don't set
//@param int|px|list|bool $cbw-ref containing block width reference
@mixin fluid-horizontal($width:false, $padding: false, $border: false, $margin: false, $cbw-ref) {
   $cbw: get-cbw($cbw-ref);
   @if ($width) {
      @include percent-property(width, $width, $cbw);
   }
   @if ($padding) {
      $left-right-padding: extract-left-right-values($padding);
      @include percent-property(padding-left, nth($left-right-padding, 1), $cbw);
      @include percent-property(padding-right, nth($left-right-padding, 2), $cbw);
   }
   @if ($border) {
      $left-right-border: extract-left-right-values($border);
      @include percent-property(border-left-width, nth($left-right-border, 1), $cbw);
      @include percent-property(border-right-width, nth($left-right-border, 2), $cbw);
   }
   @if ($margin) {
      $left-right-margin: extract-left-right-values($margin);
      @include percent-property(margin-left, nth($left-right-margin, 1), $cbw);
      @include percent-property(margin-right, nth($left-right-margin, 2), $cbw);
   }
}

//Display the rules to create a fluid column
//
///@param px|list|string|bool $width width value. Horizontal size units, a string to manually force something or false to don't set
///@param px|list|string|bool $padding padding value. Horizontal size units, a string to manually force something or false to don't set
///@param px|list|string|bool $border border value. Horizontal size units, a string to manually force something or false to don't set
///@param px|list|string|bool $margin margin value. Horizontal size units, a string to manually force something or false to don't set
//@param int|px|list $cbw-ref containing block width reference
@mixin fluid-column($width, $padding: false, $border: false, $margin: false, $cbw-ref) {
   @include columnize();
   @include fluid-horizontal($width, $padding, $border, $margin, $cbw-ref);
}

//FUNCTIONS
//Returns a percent size since a size in pixels or grid units
//
//@param px|list $h-size horizontal size units to be transformed to percentage
//@param int|px|list $cbw-ref containing block width reference
//
//@return % size transformed to percentage
@function percent($h-size, $cbw-ref) {
   $cbw: get-cbw($cbw-ref);
   @if (type_of($h-size) == list) {
      $h-size: grid-to-px($h-size);
   }
   @return px-to-percent($h-size, $cbw);
}

//Returns grid width in pixels
//
//@return px grid width in pixels
@function grid-width() {
   @return ($column-width + $gutter-width) * $columns;
}

//SYSTEM MIXINS
//For given property and value, display rule with the value as percentage
//
//@param string $property property which the rule will be applied
//@param px|list|string $value Horizontal size units or a string to manually force something
//@param px $cbw containing block width in pixels
@mixin percent-property($property, $value, $cbw) {
   @if (type_of($value) == number) {
      @if ($value == 0) {
	 #{$property}: 0;
      } @else if (unit($value) == px) {
	 #{$property}: px-to-percent($value, $cbw);
      }
   } @else if (type_of($value) == list) {
      $value: grid-to-px($value);
      #{$property}: px-to-percent($value, $cbw);
   } @else if (type_of($value) == string) {
      #{$property}: unquote($value);
   }
}

//Display minimal styles to make a box a column
@mixin columnize() {
   float: left;
}

//SYSTEM FUNCTIONS
//Transform grid units to percentage
//
//@param list $grid-size grid units
//
//@return px grid units transformed to pixels
@function grid-to-px($grid-size) {
   @return ((nth($grid-size, 1) * $column-width) + (nth($grid-size, 2) * $gutter-width));
}

//Transform a size in pixels to percentage
//
//@param px $px-size a size in pixels
//@param px $cbw containing block width in pixels used to referenciate the percentage to calculate
//
//@return % size transformed to percentage
@function px-to-percent($px-size, $cbw) {
   @return ($px-size / $cbw) * 100%;
}

//Get containing block width in pixels since a containing block width reference
//
//@param int|px|list $cbw-ref containing block width reference
//
//@return px containing block width in pixels
@function get-cbw($cbw-ref) {
   @if (type_of($cbw-ref) == list) {
      @return grid-to-px($cbw-ref);
   } @else if (type_of($cbw-ref) == number) {
      @if (unit($cbw-ref) == px) {
	 @return $cbw-ref;
      }
   }
}

//For a given value representing both left and right size, return a list of two elements, being first one left value and second one right value
//
//@param px|list|string $value one (the same for left and right) or two (first is left, second is right) horizontal size units or string to manually indicate something
//@param px $cbw containing block width
//
//@return list left and right values
@function  extract-left-right-values($value) {
   $value-left: false;
   $value-right: false;
   @if (type_of($value) == number) {
      @if (unit($value) == px or $value == 0) {
	 $value-left: $value;
	 $value-right: $value;
      }
   } @else if (type_of($value) == list) {
      @if (type_of(nth($value, 1)) == number and type_of(nth($value, 2)) == number) {
	 @if (unit(nth($value, 1)) == px and unit(nth($value, 2)) == px) {
	    $value-left: nth($value, 1);
	    $value-right: nth($value, 2);
	 } @else if (unitless(nth($value, 1)) and unitless(nth($value, 2))) {
	    $value: grid-to-px(nth($value, 1) nth($value, 2));
	    $value-left: $value;
	    $value-right: $value;
	 }
      } @else {
	 $value-left: nth($value, 1);
	 $value-right: nth($value, 2);
      }
   } @else if (type_of($value) == string) {
      $value-left: $value;
      $value-right: $value;
   }
   @return ($value-left, $value-right);
}
