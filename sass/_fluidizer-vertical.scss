//Copyright 2011, Marc Busqué Pérez
//
//This file is a part of Fluidizer.
//
//Fluidizer is free software: you can redistribute it and/or modify
//it under the terms of the GNU Lesser General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Lesser General Public License for more details.
//
//You should have received a copy of the GNU Lesser General Public License
//along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//////////////////////////////////////////////////////////////////////////////
//Contact: Marc Busqué Pérez - marc@lamarciana.com - http://www.lamarciana.com
//////////////////////////////////////////////////////////////////////////////
//
//DEFINITIONS USED THROUGHOUT THE DOCUMENTATION
//
//Vertical size units: An integer in pixels to tell a vertical size in pixels, or an unitless integer to indicate a vertical size in baseline units (see below).
//
//Baseline units: A unitless integer. It tells how many baseline heights the vertical size takes up.
//
//Property vertical size units: Vertical size units, a string to manually force something or false to don't set it.

//VARIABLES
//
//@global px Baseline height in pixels.
$baseline: 18px !default;

//@global px Initial relevant font size (usually browser default).
$initial-rfs: 16px !default;

//MIXINS
//Display rules for vertical fluid sizes.
//
///@param px|int|string|bool $line-height Line-height value in property vertical size units.
///@param px|int|string|bool $height Height value in property vertical size units.
///@param px|int|string|bool $padding Padding top and bottom values in vertical size units. One (the same for top and bottom) or a list of two (first for top, and second for bottom).
///@param px|int|string|bool $border Border top and bottom values in vertical size units. One (the same for top and bottom) or a list of two (first for top, and second for bottom).
///@param px|int|string|bool $margin Margin top and bottom values in vertical size units. One (the same for top and bottom) or a list of two (first for top, and second for bottom).
//@param px|int $rfs Relevant font size.
@mixin fluid-vertical($line-height: false, $height: false, $padding: false, $border: false, $margin: false, $rfs: $initial-rfs) {
   @include display-vertical-property(line-height, $line-height, $rfs);
   @include display-vertical-property(height, $height, $rfs);
   $top-bottom-padding: extract-top-bottom-values($padding);
   @include display-vertical-property('padding-top', nth($top-bottom-padding, 1), $rfs);
   @include display-vertical-property('padding-bottom', nth($top-bottom-padding, 2), $rfs);
   $top-bottom-border: extract-top-bottom-values($border);
   @include display-vertical-property('border-top-width', nth($top-bottom-border, 1), $rfs);
   @include display-vertical-property('border-bottom-width', nth($top-bottom-border, 2), $rfs);
   $top-bottom-margin: extract-top-bottom-values($margin);
   @include display-vertical-property('margin-top', nth($top-bottom-margin, 1), $rfs);
   @include display-vertical-property('margin-bottom', nth($top-bottom-margin, 2), $rfs);
}

//For given property and value, display its rule with the value in em units if it's numeric.
//
//@param string $property Property the rule will be applied on.
//@param px|list|string $value A value in property vertical size units.
//@param px $rfs Relevant font size in vertical size units.
@mixin display-vertical-property($property, $value, $rfs) {
   @if ($value) {
      @if (is-px-unit($value) or is-baseline-unit($value)) {
         #{$property}: em($value, $rfs);
      } @else {
         #{$property}: unquote($value);
      }
   }
}

//FUNCTIONS
//
//Converts from vertical size units to em.
//
//@param px|int $value A value in vertical size units
//@param int|px $rfs Relevant font size in vertical size units.
//
//@return em The value converted to em's.
@function em($value, $rfs: $initial-rfs) {
   $v-size-px = vertical-to-px($value);
   @return px-to-em($v-size-px, $rfs);
}

//Converts a px value to em.
//
//@param px $value A value in pixels.
//@param px $rfs Relevant font size in vertical size units.
//
//@return em The value converted to em's.
@function px-to-em($value, $rfs) {
   $rfs-px: vertical-to-px($rfs);
   @return ($px-size / $rfs-px) * 1em;
}

//Converts a vertical size units value to pixels.
//
//@param px $value A value in vertical size units.
//
//@return em The value converted to pixels.
@function vertical-to-px($value) {
   @if (is-baseline-unit($value)) {
      @return baseline-to-px($value);
   } @else if (is-px-unit($valye)) {
      @return $value;
   }
}

//Converts baseline units to pixels.
//
//@param int $value A value in baseline units.
//
//@return px The value converted to pixels.
@function baseline-to-px($value) {
   @return $value * $baseline;
}

//For a given value representing both top and bottom size, return a list of two elements, being first one top value and second one bottom value
//
//@param px|list|string $value One (the same for top and bottom) or two (first is top, second is bottom) peroperty vertical size units.
//
//@return list Top and bottom values discerned.
@function extract-top-bottom-values($value) {
   $value-top: false;
   $value-bottom: false;
   @if (type_of($value) != list) {
      $value-top: $value;
      $value-bottom: $value;
   } @else {
      $value-top: nth($value, 1);
      $value-bottom: nth($value, 2);
   }
   @return ($value-top, $value-bottom);
}

//Check whether a value is expressed in baseline units or not.
//
//@param mixed $value The value to check.
//
//@return bool Whether the value is expressed in baseline units or not.
@function is-baseline-unit($value) {
   @if (type_of($value) == number) {
      @if (unitless($value)) {
         @return true;
      }
      @return false;
   }
}
