//Copyright 2011, Marc Busqué Pérez
//
//This file is a part of Fluidizer.
//
//Fluidizer is free software: you can redistribute it and/or modify
//it under the terms of the GNU Lesser General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Lesser General Public License for more details.
//
//You should have received a copy of the GNU Lesser General Public License
//along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//////////////////////////////////////////////////////////////////////////////
//Contact: Marc Busqué Pérez - marc@lamarciana.com - http://www.lamarciana.com
//////////////////////////////////////////////////////////////////////////////
//In documentation, "vertical size unit" value mean: an integer in pixels to indicate a vertical size in pixels, or an unitless integer to indicate a vertical size in "baseline units". In baseline units, the number indicates how many baseline heights the vertical size spreads
//
//In documentation, "relevant font size reference" is a value indicating the relevant font size for given selected elements. It can be an integer in pixels (for a manual assigment) or a unitless integer. If last one, 0 means relevant font size is `$initial-rfs`, 1 means relevant font size is the second relevant font size setted and so on. -1 means relevant font size is last one setted.
//
//VARIABLES
//@global px baseline height in pixels
$baseline:18px !default;

//@global px initial relevant font size (usually browser default)
$initial-rfs:16px !default;

//@global int|px default relevant font size reference
$default-rfs-ref: -1 !default;

//@global px|list|bool runtime variable which will contain the relevant font size history
$rfs-history: false !default;

//MIXINS
//Display the rules to create a vertical fluid box
//
///@param px|int|string|bool $line-height line-height value. In vertical size units, a string to manually indicate something or false to don't set it
///@param px|int|string|bool $height height value. In vertical size units, a string to manually indicate something, or false to don't set it
///@param px|int|string|bool $padding padding value. In vertical size units, a string to manually indicate something, or false to don't set it
///@param px|int|string|bool $boder boder value. In vertical size units, a string to manually indicate something, or false to don't set it
///@param px|int|string|bool $margin margin value. In vertical size units, a string to manually indicate something, or false to don't set it
@mixin fluid-vertical($line-height: false, $height:false, $padding: false, $border: false, $margin: false, $rfs-ref: $default-rfs-ref) {
   $rfs: _get-rfs($rfs-ref);
   @if ($line-height) {
      @include _em-property(line-height, $line-height, $rfs);
   }
   @if ($height) {
      @include _em-property(height, $height, $rfs);
   }
   @if ($padding) {
      $left-right-padding: _extract-top-bottom-values($padding);
      @include _em-property("padding-top", nth($left-right-padding, 1), $rfs);
      @include _em-property("padding-bottom", nth($left-right-padding, 2), $rfs);
   }
   @if ($border) {
      $left-right-border: _extract-top-bottom-values($border);
      @include _em-property("border-top-width", nth($left-right-border, 1), $rfs);
      @include _em-property("border-bottom-width", nth($left-right-border, 2), $rfs);
   }
   @if ($margin) {
      $left-right-margin: _extract-top-bottom-values($margin);
      @include _em-property("margin-top", nth($left-right-margin, 1), $rfs);
      @include _em-property("margin-bottom", nth($left-right-margin, 2), $rfs);
   }
   $rfs-history: _update-rfs-history(false, $rfs-ref);
}

//FUNCTIONS
//Return an em size since a value in vertical size units
//
//@param px|int $v-size size to be transformed to em's. In vertical size units
//@param int|px $rfs-ref relevant font size reference
//
//@return em size transformed to em's
@function em($v-size, $rfs-ref: $default-rfs-ref) {
   @if (unitless($v-size)) {
      $v-size: _px-from-baseline($v-size);
   }
   $rfs: _get-rfs($rfs-ref);
   $px-size: _em-from-px($v-size, $rfs);
   $rfs-history: _update-rfs-history(false, $rfs-ref);
   @return $px-size;
}

//Return an em font-size since a font-size in vertical size units
//
//@param px|int $font-size font-size to be transformed to em's. In vertical size units
//@param int|px $rfs-ref relevant font size reference
//
//@return em size transformed to em's
@function em-font-size($font-size, $rfs-ref: $default-rfs-ref) {
   @if (unitless($font-size)) {
      $font-size: _px-from-baseline($font-size);
   }
   $rfs: _get-rfs($rfs-ref);
   $px-size: _em-from-px($font-size, $rfs);
   $rfs-history: _update-rfs-history($font-size, $rfs-ref);
   @return $px-size;
}

//Reset relevant font size history, returning initial relevant font size. Value returned has to be assigned manually to @global $rfs-history
//
//@return px initial relevant font size
@function reset-rfs-history() {
   @return $initial-rfs;
}

//SYSTEM MIXINS
//For given property and value, display rule with the value in em's
//
//@param string $property the property which the rule will be applied
//@param px|list|string $value Horizontal size units or a string to manually force something
//@param px $rfs relevant font size
@mixin _em-property($property, $value, $rfs) {
   @if (type_of($value) == number) {
      @if ($value == 0) {
	 #{$property}: 0;
      } @else if (unit($value) == px) {
	 #{$property}: _em-from-px($value, $rfs);
      } @else if (unitless($value)) {
	 $value: _px-from-baseline($value);
	 #{$property}: _em-from-px($value, $rfs);
      }
   } @else if (type_of($value) == string) {
      #{$property}: unquote($value);
   }
}

//SYSTEM FUNCTIONS
//Transform from baseline units to pixel
//
//@param int $baseline-size baseline units
//
//@return px baseline units transformed to pixels
@function _px-from-baseline($baseline-size) {
   @return $baseline-size * $baseline;
}

//Transform a px size to em
//
//@param px $px-size a size in pixels
//@param px $rfs relevant font size
//
//@return em size transformed to em's
@function _em-from-px($px-size, $rfs) {
   @return ($px-size / $rfs) * 1em;
}

//For a given value representing both top and bottom size, return a list of two elements, being first one top value and second one bottom value
//
//@param px|list|string $value one (the same for top and bottom) or two (first is top, second is bottom) vertical size units or string to manually indicate something
//@param px $rfs relevant font size
//
//@return list list of top and bottom values
@function _extract-top-bottom-values($value) {
   $value-top: false;
   $value-bottom: false;
   @if (type_of($value) == number) {
      @if (unit($value) == px or $value == 0) {
	 $value-top: $value;
	 $value-bottom: $value;
      } @else if (unitless($value)) {
	 $value: _px-from-baseline($value);
	 $value-top: $value;
	 $value-bottom: $value;
      }
   } @else if (type_of($value) == list) {
      $value-top: nth($value, 1);
      $value-bottom: nth($value, 2);
   } @else if (type_of($value) == string) {
      $value-top: $value;
      $value-bottom: $value;
   }
   @return ($value-top, $value-bottom);
}

//Get relevant font size in pixels since a relevant font size reference
//
//@param int|px $rfs-ref relevant font size reference
//
//@return px relevant font size in pixels
@function _get-rfs($rfs-ref) {
   @if ($rfs-history == false) { //if still not initialized, initialize rfs-history with user settings
      $rfs-history: reset-rfs-history();
   }
   @if (type_of($rfs-ref) == number) {
      @if (unit($rfs-ref) == px) {
	 @return $rfs-ref;
      } @else if (unitless($rfs-ref)) {
	 @if ($rfs-ref == -1) {
	    $last-index: length($rfs-history);
	    @return nth($rfs-history, $last-index);
	 } @else {
	    @return nth($rfs-history, $rfs-ref + 1);
	 }
      }
   }
}

//Update relevant font size history. If a reference to an upper font size in history is supplied, pointer will be setted to that font size (rest of history will be removed). The, if a new font-size is supplied, that font-size will be added to the corresponding nesting level. If a manual relevant font size is passed (vertical size units), nothing happens. The returning value of this function has to be assigned manually to @global $rfs-history
//
//@param px|bool $fs $font-size to be updated. If it's a boolean false, then relevant font size history will be updated but no new relevant font-size will be added
//@param int|px $rfs-ref relevant font size reference
//
//@return list new relevant font size history, a list of integers in pixels
@function _update-rfs-history($fs, $rfs-ref) {
   @if (unit($rfs-ref) == px) {
      @return $rfs-history;
   } @else if (unitless($rfs-ref)) {
      @if ($rfs-ref == 0) {
	 $rfs-history: reset-rfs-history();
      } @else if($rfs-ref > 0) {
	 $new-rfs-history: reset-rfs-history();
	 @for $i from 2 through $rfs-ref +1 {
	    $new-rfs-history: append($new-rfs-history, nth($rfs-history, $i));
	 }
	 $rfs-history: $new-rfs-history;
      }
   }
   @if ($fs != false) {
      $rfs-history: append($rfs-history, $fs);
   }
   @return $rfs-history;
}
